let apiUrl;
let apiKey;

module.exports = function BotArmyRuntimeLib(fetch) {
  return {
    /**
     * @namespace BotArmyRuntime
     * @returns {BotArmyRuntime}
     */
    BotArmyRuntime: {
      init: (url, key) => {
        apiUrl = url;
        apiKey = key;
      },

      /**
       * Creates a conversation using the ServisBOT API
       *
       * @param {string} endpoint - R2 endpoint
       * @param {string} customerReference
       * @param {object} context
       * @param {object} [options]
       * @returns {object} { conversationId }
       */
      createConversation: (
        endpoint,
        customerReference,
        context,
        options = {}
      ) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const body = {
          Endpoint: endpoint,
          CustomerReference: customerReference,
          Context: context,
        };

        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/CreateConversation`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Gets a conversation by its conversation ID.
       *
       * @param {string} conversationId
       * @returns {object} conversation
       */
      getConversationByConversationId: (conversationId) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const opts = {
          method: 'POST',
          body: JSON.stringify({ ConversationId: conversationId }),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/GetConversation`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Gets a conversation by its customer reference.
       *
       * @param customerReference
       * @returns {object} conversation
       */
      getConversationByCustomerReference: (customerReference, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const opts = {
          method: 'POST',
          body: JSON.stringify({ CustomerReference: customerReference }),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/GetConversation`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Updates the context and state of a conversation.
       *
       * @param {string} conversationId
       * @param {object} context - map of key-value pairs
       * @param {string} state - one of: START, STOP, DONE, PAUSE
       * @returns {object} { conversationId }
       */
      updateConversation: (conversationId, context, state, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const body = {
          ConversationId: conversationId,
          Context: context,
          State: state
        };

        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/UpdateConversation`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Deletes the mapping of conversationId to customer reference.
       *
       * @param {string} conversationId
       * @returns {object} { conversationId }
       */
      deleteConversation: (conversationId) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const opts = {
          method: 'POST',
          body: JSON.stringify({ ConversationId: conversationId }),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/DeleteConversation`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Returns all context and messages for a given converstion
       *
       * @param {string} conversationId, the conversationId
       * @param {string} identity, the identity
       * @returns {object} { context: {}, messages: [] }
       */
      getConversationDetails: (conversationId, identity) => {
        if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
        const options = {
          method: 'POST',
          body: JSON.stringify({ ConversationId: conversationId, Identity: identity }),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey
          }
        };

        const url = `${apiUrl}/v1/BotArmyRuntime/GetConversationDetails`;
        return fetch(url, options)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      }
    }
  };
};
