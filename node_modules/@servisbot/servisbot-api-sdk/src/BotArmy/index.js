module.exports = function BotArmyLib(fetch) {
  let apiUrl;
  let apiKey;

  return {
    /**
     * @namespace BotArmy
     * @returns {BotArmy}
     */
    BotArmy: {
      init: (url, key) => {
        apiUrl = url;
        apiKey = key;
      },

      /**
       * Creates an endpoint
       *
       * @param {string} Address - Address for the endpoint
       * @param {string} Name - Name of the endpoint
       * @param {string} Status - status of the endpoint either online or offline
       * @param {string} TargetBotReference  - the bot this endpoint is targeted at
       * @param {string} InboundBotReference - the bot that sent the message
       * @param {string} OutboundBotReference - the bot to reply too
       * @param {string} Useragent - platform the message is coming from
       * @returns {object} { Endpoint }
       */
      createEndpoint: (params, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const opts = {
          method: 'POST',
          body: JSON.stringify(params),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/CreateEndpoint`;
        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },
      /**
       * Describes an endpoint
       *
       * @param {string} Address - Address of the endpoint
       * @returns {object} { Endpoint }
       */
      describeEndpoint: (Address, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Address,
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/DescribeEndpoint`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Deletes an endpoint
       *
       * @param {string} Address - Address of the endpoint
       */
      deleteEndpoint: (Address, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const opts = {
          method: 'POST',
          body: JSON.stringify({ Address }),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/DeleteEndpoint`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return;
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },
      /**
       * Updates an endpoint
       *
       * @param {string} params - Address of the endpoint
       * @returns {object} { Endpoint }
       */
      updateEndpoint: (params, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }

        const opts = {
          method: 'POST',
          body: JSON.stringify(params),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/UpdateEndpoint`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Creates a bot
       *
       * @param {string} Name
       * @param {string} State
       * @param {string} TimeZone
       * @param {bool} SecureSession
       * @param {bool} QuietTimeEnabled
       * @param {object} Workers
       * @param {object} options
       */
      createBot: (
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers, options = {}
      ) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/CreateBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Updates a bot
       *
       * @param {string} Name
       * @param {string} State
       * @param {string} TimeZone
       * @param {bool} SecureSession
       * @param {bool} QuietTimeEnabled
       * @param {object} Workers
       * @param {object} options
       */
      updateBot: (
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers, options = {}
      ) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/UpdateBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Deletes a bot
       *
       * @param {string} Name
       * @param {object} options
       */
      deleteBot: (Name, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/DeleteBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Describes a bot
       *
       * @param {string} Name
       * @param {object} options
       */
      describeBot: (Name, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/DescribeBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Starts a bot
       *
       * @param {string} Name
       * @param {object} options
       */
      startBot: (Name, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/StartBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Pauses a bot
       *
       * @param {string} Name
       * @param {object} options
       */
      pauseBot: (Name, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/PauseBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

      /**
       * Stops a bot
       *
       * @param {string} Name
       * @param {object} options
       */
      stopBot: (Name, options = {}) => {
        if (!apiUrl || !apiKey) {
          return Promise.reject(new Error('Url and/or key not valid'));
        }
        const body = {
          Name
        };
        const opts = {
          method: 'POST',
          body: JSON.stringify(body),
          headers: {
            'Content-Type': 'application/json',
            'x-api-key': apiKey,
            'X-Correlation-ID': options.correlationId,
          }
        };

        const url = `${apiUrl}/v1/BotArmy/StopBot`;

        return fetch(url, opts)
          .then((res) => {
            switch (res.status) {
              case 200:
                return res.json();
              default:
                // eslint-disable-next-line no-case-declarations
                const error = new Error(res.statusText);
                error.statusCode = res.status;
                throw error;
            }
          });
      },

    }
  };
};
