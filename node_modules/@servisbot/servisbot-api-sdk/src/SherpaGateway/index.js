let apiUrl;
let apiKey;
const fetchRequest = require('./util/fetchRequest');

module.exports = (fetch) => {
  const SherpaGateway = {
    init: (url, key) => {
      if (!url || !key) return Promise.reject(new Error('Url and/or key not valid'));
      apiUrl = url;
      apiKey = key;
      return Promise.resolve();
    },
    sendMessage: (ConversationId, Identity, Message, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        Message,
      };
      const url = `${apiUrl}/v1/SherpaGateway/SendMessage`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendLink: (ConversationId, Identity, Title, Href, Type, Content, Description, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        Title,
        Href,
        Type,
        Content,
        Description
      };
      const url = `${apiUrl}/v1/SherpaGateway/SendLink`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendAttachment: (ConversationId, Identity, Title, Href, Type, Content, Source, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        Title,
        Href,
        Type,
        Content,
        Source
      };

      const url = `${apiUrl}/v1/SherpaGateway/SendAttachment`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendPrompt: (ConversationId, Identity, PromptText, Choices, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        PromptText,
        Choices
      };

      const url = `${apiUrl}/v1/SherpaGateway/SendPrompt`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendMarkup: (ConversationId, Identity, Markup, Context, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        Markup,
        Context,
      };

      const url = `${apiUrl}/v1/SherpaGateway/SendMarkup`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendWebView: (ConversationId, Identity, TaskText, TaskStatus, TaskUrl, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        TaskText,
        TaskStatus,
        TaskUrl,
      };

      const url = `${apiUrl}/v1/SherpaGateway/SendWebView`;
      return fetchRequest(fetch, url, body, apiKey, options);
    },
    sendCustomTrigger: (ConversationId, Identity, TriggerName, TriggerData, options = {}) => {
      if (!apiUrl || !apiKey) return Promise.reject(new Error('Url and/or key not valid'));
      const body = {
        ConversationId,
        Identity,
        TriggerName,
        TriggerData
      };
      const url = `${apiUrl}/v1/SherpaGateway/SendCustomTrigger`;

      return fetchRequest(fetch, url, body, apiKey, options);
    }
  };
  return { SherpaGateway };
};
