const regex = /[^$]{[a-zA-Z0-9.]+}/gm;
const R = require('ramda');

/* eslint-disable no-console, max-len, no-useless-escape */

const checkItem = (item) => {
  const matches = item.match(regex);
  if (matches) {
    matches.forEach((m) => {
      console.log(`warning: found potential error; ${m} should be \$${m} to perform string substitution, if you did not intend substitution, please ignore`);
    });
  }
};
const flattenObj = (obj) => {
  const go = obj_ => R.chain(([k, v]) => {
    if (R.type(v) === 'Object' || R.type(v) === 'Array') {
      return R.map(([k_, v_]) => [`${k}.${k_}`, v_], go(v));
    }
    return [[k, v]];
  }, R.toPairs(obj_));
  return R.fromPairs(go(obj));
};

module.exports = (orchestrator) => {
  const flattenOrchestrator = flattenObj(orchestrator);
  Object.keys(flattenOrchestrator).forEach((key) => {
    if (flattenOrchestrator[key] && typeof flattenOrchestrator[key] === 'string') {
      checkItem(flattenOrchestrator[key]);
    }
  });
};
