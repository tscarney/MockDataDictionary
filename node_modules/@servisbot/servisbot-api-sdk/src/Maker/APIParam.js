const logger = require('@servisbot/sb-logger');
/**
 * @namespace APIParam
 */
/**
 * JSONBodyPathSet - Sets a value in a Maker.API request body before performing the request
 * @class
 * @memberof APIParam
 *
 * @param {Object} apiparam
 * @param {string} apiparam.name - Name of the property as found in context - this `name` must exist in context{}
 * @param {string} apiparam.path - The dot separated path to place this param in before performing the request
 * @returns {Maker.APIParam.JSONBodyPathSet}
 */
class JSONBodyPathSet {
  constructor({
    target, source, name, path
  }) {
    let localTarget = target;
    let localSource = source;
    this.type = 'JSONBodyPathGet';
    if (name) {
      logger.warn('JSONBodyPathGet.name is deprecated - use `target`.');
      localTarget = name;
    }
    if (path) {
      logger.warn('JSONBodyPathGet.path is deprecated - use `source`.');
      localSource = path;
    }
    this.type = 'JSONBodyPathSet';
    this.source = localSource;
    this.target = localTarget;
  }
}

/**
 * JSONBodyPathGet - Gets a value from a Maker.API response body after the request is performed
 * @class
 * @memberof APIParam
 *
 * @param {Object} apiparam
 * @param {string} apiparam.source - The JSONPath statement to retrieve the param from in the response body - see jsonpath.com
 * @param {string} apiparam.target - The name to use in context{} - where this property is put. Defaults as just the slot value.
 * @returns {Maker.APIParam.JSONBodyPathGet}
 */
class JSONBodyPathGet {
  constructor({
    target, source, name, path
  }) {
    let localTarget = target;
    let localSource = source;
    this.type = 'JSONBodyPathGet';
    if (name) {
      logger.warn('JSONBodyPathGet.name is deprecated - use `target`.');
      localTarget = name;
    }
    if (path) {
      logger.warn('JSONBodyPathGet.path is deprecated - use `source`.');
      localSource = path;
    }
    this.source = localSource;
    this.target = localTarget;
  }
}

/**
 * URLParam - Sets a value from context into the Maker.API request endpoint
 * @class
 * @memberof APIParam
 *
 * @param {Object} apiparam
 * @param {string} apiparam.name - Name of the property as found in context - this `name` must exist in context{}
 * @param {string} apiparam.path - The ${name} of the property as it appears in the Maker.API's endpoint url string.
 * @returns {Maker.APIParam.URLParam}
 */
class URLParam {
  constructor({ name, path }) {
    this.type = 'URLParam';
    this.name = name;
    this.path = path;
  }
}

/**
 * HeaderParam - Sets a value from context into the Maker.API request headers
 * @class
 * @memberof APIParam
 *
 * @param {Object} apiparam
 * @param {string} apiparam.name - Name of the property as found in context - this `name` must exist in context{}
 * @param {string} apiparam.path - The ${name} of the property as it appears in the Maker.API's headers{} map
 * @returns {Maker.APIParam.URLParam}
 */
class HeaderParam {
  constructor({ name, path }) {
    this.type = 'HeaderParam';
    this.name = name;
    this.path = path;
  }
}

module.exports = {
  JSONBodyPath: JSONBodyPathSet, // TODO: Legacy support
  JSONBodyPathSet,
  JSONBodyPathGet,
  /*
  URL Param - adds attributes into the URL param. Reference params via ${name} in URLs
  */
  URLParam,
  /*
  Header Param - adds attributes into the URL param. Reference params via ${name} in URLs
  */
  HeaderParam,
};
