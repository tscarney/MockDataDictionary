#!/usr/bin/env bash
set -e

if [[ ${DEBUG} == "True" ]]; then
    set -x
fi

NPM_OLD_VERSION=$(node -p "require('./package.json').version")
PROJECT_TYPE="nodejs"

CODEBUILD_GIT_AUTHOR="$(git log -1 --pretty=%an)"
if [[ ${GITHUB_COMMITER} == "servisbotci" && ${CODEBUILD_GIT_AUTHOR} == "servisbotci" ]]; then
    if [[ ${FUNC_VER} == " " || -z ${FUNC_VER} ]]; then
        echo "INFO: Skipping build by user ${GITHUB_COMMITER}"
        exit 0
    fi
fi

###
# Install apt dependencies
##
apt-get -qq update && apt-get -qq install jq zip curl openssh-client > /dev/null 2>&1

echo "INFO: Downloading helper scripts"
HELPER_SCRIPTS="account-info aws general cloudformation slack"
for helper in ${HELPER_SCRIPTS}; do
    aws s3 cp s3://servisbot-buildscripts/utils-${helper}.sh . --quiet
    source utils-${helper}.sh
done

echo "INFO: Building version ${CODEBUILD_GIT_BRANCH}"

if [[ -z ${APP_NAME} ]]; then
    APP_NAME=$(git config --get remote.origin.url | rev | cut -d "/" -f1 | rev)
fi

function run_tests() {
    echo "INFO: Running Sonar"
    run_sonar
    echo "INFO: Running tools/codebuild.sh"
    bash tools/codebuild.sh
    echo "INFO: Running depcheck"
    if [[ ${APP_NAME} == "sherpa.shared.servisbot-api-sdk" ]]; then
        echo "INFO: skipping depcheck"
    else
        run_depcheck
    fi
}

function post_to_slack () {
    SLACK_CHANNEL=releases
    JIRA_TICKET=$(git log --format=%s v"${NPM_NEW_VERSION}"..v"${NPM_OLD_VERSION}" | grep -o -iE "^[A-Z]{3,5}-[0-9]{1,5}" | sort | uniq | tr '\n' ' ' | tr '[:lower:]' '[:upper:]')
    SLACK_URL=$(aws ssm get-parameters --with-decryption --names /slack/notifications/${SLACK_CHANNEL} --query 'Parameters[0].Value' --output text)
    SLACK_MESSAGE="Published version _${NPM_NEW_VERSION}_\n\n_Whatâ€™s in this deploy:_ ${JIRA_TICKET}"

    curl -X POST --data "payload={\"text\": \"${SLACK_MESSAGE}\", \"username\": \"${APP_NAME}\", \"icon_emoji\": \":botty:\"}" "${SLACK_URL}"
}

function update_version_git() {
    echo "INFO: Adding git tag (v${FUNC_VER})"
    VERSION_CHANGED=$(git show ${COMMIT} package.json | grep version) || true

    echo "SEMVER_UPDATED=${SEMVER_UPDATED}"
    echo "VERSION_CHANGED=${VERSION_CHANGED}"

    if git tag | grep ${FUNC_VER}; then
        echo "INFO: Skipping update .."
    else
        git checkout master
        git reset --hard HEAD
        if [[ -z ${VERSION_CHANGED} ]]; then
            npm version patch -m "Release version %s"
        fi
        git push origin master
        git push origin master --tags
    fi
    NPM_NEW_VERSION=$(node -p "require('./package.json').version")
}

function npm_publish() {
    if [[ ${CODEBUILD_PROJECT} == "npm-sb-sdk" || ${CODEBUILD_PROJECT} == "servisbot-cli" ]]; then
        PUBLISHPUBLIC="--access public"
    elif [[ ${PUBLIC_NPM_MODULE} == "True" ]]; then
        PUBLISHPUBLIC="--access public"
    fi
    npm publish ${PUBLISHPUBLIC}
}

function post_build() {
    if [[ -f "tools/post_codebuild.sh" ]]; then
        echo "INFO: Run post build script"
        bash tools/post_codebuild.sh
    fi
}

export FUNCTION_NAME=${APP_NAME}
if [[ ${AWS_ENV} == "helower" ]]; then
    BRANCH_NAME=$(git name-rev --name-only HEAD)
    if [[ -n ${NPM_MODULE_NAME} && -n ${NPM_MODULE_VERSION} ]]; then
        if [[ ${NPM_UPDATE} == "True" ]]; then
            update_npm_version
            if [[ "${NPM_MODULE_STATUS}" == "False" ]]; then
                exit 0
            fi
        fi
    fi
    run_tests
    if [[ ${CODEBUILD_GIT_BRANCH} = *"master" ]]; then
        auth_github ${APP_NAME}
        update_version_git
        npm_publish
        post_build
        post_to_slack
    fi
fi
