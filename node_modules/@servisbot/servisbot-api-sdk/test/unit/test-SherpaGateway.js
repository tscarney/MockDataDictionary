const assert = require('assert');
const sinon = require('sinon');
const SherpaGatewayModule = require('../../src/SherpaGateway');

describe('Unit:SherpaGateway', () => {
  let apiKey;
  let apiUrl;
  let conversationId;
  let identity;
  let triggerName;
  let correlationId;

  beforeEach(() => {
    apiKey = 'some-api-key';
    apiUrl = 'some-api-url';
    conversationId = 'some-conversation-id';
    identity = 'some-identity';
    triggerName = 'some-trigger-name';
    correlationId = 'some-correlation-id';
  });

  it('Should reject if no url on init', async () => {
    try {
      const { SherpaGateway } = SherpaGatewayModule();
      await SherpaGateway.init(undefined, apiKey);
      assert.fail('should not get here');
    } catch (_err) {
      assert.ok(_err);
      assert.equal(_err.message, 'Url and/or key not valid');
    }
  });
  it('Should reject if no key on init', async () => {
    try {
      const { SherpaGateway } = SherpaGatewayModule();
      await SherpaGateway.init(apiUrl, undefined);
      assert.fail('should not get here');
    } catch (_err) {
      assert.ok(_err);
      assert.equal(_err.message, 'Url and/or key not valid');
    }
  });
  it('Should init correctly', async () => {
    const { SherpaGateway } = SherpaGatewayModule();
    await SherpaGateway.init(apiUrl, apiKey);
    assert.ok(true, 'Should not fail');
  });

  describe('sendMessage', () => {
    it('should send a message', async () => {
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const Message = 'hello from sherpa';
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendMessage(conversationId, identity, Message, { correlationId });
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendMessage'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const Message = 'hello from sherpa';
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendMessage(conversationId, identity, Message, {}, { correlationId });
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendMessage'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendLink', () => {
    it('should send a link', async () => {
      const title = 'a link';
      const href = 'http://www.google.com/image';
      const type = 'image/jpeg';
      const content = 'some content';
      const description = 'some description';
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendLink(
        conversationId, identity, title, href, type, content, description, { correlationId }
      );
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendLink'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const title = 'a link';
      const href = 'http://www.google.com/image';
      const type = 'image/jpeg';
      const content = 'some content';
      const description = 'some description';
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendLink(
          conversationId, identity, title, href, type, content, description, { correlationId }
        );
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendLink'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendAttachment', () => {
    it('should send an attachment', async () => {
      const title = 'a link';
      const href = 'http://www.google.com/image';
      const type = 'image/jpeg';
      const content = 'some content';
      const source = 'some source';
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendAttachment(
        conversationId, identity, title, href, type, content, source, { correlationId }
      );
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendAttachment'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const title = 'a link';
      const href = 'http://www.google.com/image';
      const type = 'image/jpeg';
      const content = 'some content';
      const source = 'some source';
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendAttachment(
          conversationId, identity, title, href, type, content, source, { correlationId }
        );
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendAttachment'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendPrompt', () => {
    it('should send a prompt', async () => {
      const promptText = 'some prompt text';
      const choices = [1, 2, 3];
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendPrompt(conversationId, identity, promptText, choices, { correlationId });
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendPrompt'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const promptText = 'some prompt text';
      const choices = [1, 2, 3];
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendPrompt(conversationId, identity, promptText, choices, { correlationId });
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendPrompt'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendMarkup', () => {
    it('should send markup', async () => {
      // eslint-disable-next-line no-template-curly-in-string
      const markup = '<TimelineMessage><TextMsg>Hello ${name}</TextMsg></TimelineMessage>';
      const context = { name: 'sherpa' };
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendMarkup(
        conversationId, identity, markup, context, { correlationId }
      );
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendMarkup'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      // eslint-disable-next-line no-template-curly-in-string
      const markup = '<TimelineMessage><TextMsg>Hello ${name}</TextMsg></TimelineMessage>';
      const context = { name: 'sherpa' };
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendMarkup(
          conversationId, identity, markup, context, { correlationId }
        );
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendMarkup'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendWebView', () => {
    it('should send web view ', async () => {
      const taskText = 'Please fill in this';
      const taskStatus = 'incomplete';
      const taskUrl = 'http://www.google.com';
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendWebView(
        conversationId, identity, taskText, taskStatus, taskUrl, { correlationId }
      );
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.ok(fetchStub.args[0][0].includes('SendWebView'));
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const taskText = 'Please fill in this';
      const taskStatus = 'incomplete';
      const taskUrl = 'http://www.google.com';
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendWebView(conversationId, identity, taskText, taskStatus, taskUrl, { correlationId });
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.ok(fetchStub.args[0][0].includes('SendWebView'));
        assert.equal(_err.message, expectedError);
      }
    });
  });

  describe('sendCustomTrigger', () => {
    it('should send a custom trigger', async () => {
      const jsonStub = sinon.stub().returns({ status: 200 });
      const fetchStub = sinon.stub().resolves({ status: 200, json: jsonStub });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      const res = await SherpaGateway.sendCustomTrigger(conversationId, identity, triggerName, {}, { correlationId });
      assert.ok(fetchStub.calledOnce, 'Should fetch');
      assert.equal(res.status, 200);
    });
    it('should throw error if non 200 statuscode', async () => {
      const expectedError = 'Invalid response';
      const fetchStub = sinon.stub().resolves({ status: 404, statusText: expectedError });
      const { SherpaGateway } = SherpaGatewayModule(fetchStub);
      await SherpaGateway.init(apiUrl, apiKey);
      try {
        await SherpaGateway.sendCustomTrigger(conversationId, identity, triggerName, {}, { correlationId });
      } catch (_err) {
        assert.ok(fetchStub.calledOnce, 'Should fetch');
        assert.equal(_err.message, expectedError);
      }
    });
  });
});
