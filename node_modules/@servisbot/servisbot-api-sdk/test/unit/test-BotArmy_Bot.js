const assert = require('assert');
const sinon = require('sinon');
const Promise = require('bluebird');
const ServisBotApiSdk = require('../../src/ServisBotApiSdk');

const Name = 'myBot';
const State = 'RUNNING';
const TimeZone = 'GMT +00:00 Dublin';
const SecureSession = false;
const QuietTimeEnabled = false;
const Workers = {
  WelcomeWorker: {
    Type: 'welcome-worker',
    Id: 'abcdef1'
  },
  HumanHandoverWorker: {
    Type: 'handover-worker',
    Id: 'abcdef2'
  },
  ConversationWorker: {
    Type: 'lex-worker',
    Id: 'abcdef3'
  },
  FlowWorker: {
    Type: 'node-red',
    Id: 'abcdef4'
  }
};

describe('BotArmy (Bots)', () => {
  it('should create a bot', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve({ BotName: Name }) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.createBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, { BotName: Name }, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should reject if create bot fails', () => {
    const fetch = sinon.stub().resolves({ status: 400, statusText: 'Bad Request' });
    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.createBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then(() => assert.fail('Promise should have rejected'))
      .catch((e) => {
        assert.ok(
          e.message.includes('Bad Request'),
          'Error message should mention cause of failure'
        );
      });
  });

  it('should update a bot', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve({ BotName: Name }) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.updateBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, { BotName: Name }, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should delete a bot', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve({ BotName: Name }) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.deleteBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, { BotName: Name }, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should describe a bot', () => {
    const bot = { BotName: Name, Status: 'RUNNING' };
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(bot) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.describeBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, bot, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should start a bot', () => {
    const bot = { BotName: Name };
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(bot) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.startBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, bot, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should stop a bot', () => {
    const bot = { BotName: Name };
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(bot) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.stopBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, bot, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should pause a bot', () => {
    const bot = { BotName: Name };
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(bot) });

    const api = ServisBotApiSdk(fetch, Promise, sinon.stub());

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.pauseBot(
        Name, State, TimeZone, SecureSession, QuietTimeEnabled, Workers
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, bot, 'Wrong bot data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });
});
