const assert = require('assert');
const sinon = require('sinon');
const Promise = require('bluebird');
const ServisBotApiSdk = require('../../src/ServisBotApiSdk');

const Address = 'some-bot-address';
const Name = 'some helpful name';
const Status = 'Online';
const TargetBotReference = 'TargetBotReference-123';
const InboundBotReference = 'InboundBotReference-123';
const OutboundBotReference = 'OutboundBotReference-123';
const Useragent = 'Useragent-123';
const Endpoint = {
  Address,
  Name,
  Status,
  TargetBotReference,
  InboundBotReference,
  OutboundBotReference,
  Useragent
};

describe('BotArmy (Endpoints)', () => {
  it('should create an endpoint', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(Endpoint) });

    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://api.com', 'my-key')
      .then(() => api.BotArmy.createEndpoint(
        Address, Name, Status, TargetBotReference,
        InboundBotReference, OutboundBotReference, Useragent
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res, Endpoint, 'Wrong endpoint data returned'
        );
      })
      .catch((err) => {
        assert.fail(err);
      });
  });

  it('should reject if create endpoint fails', () => {
    const fetch = sinon.stub().resolves({ status: 400, statusText: 'Bad Request' });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => api.BotArmy.createEndpoint(
        Address, Name, Status, TargetBotReference,
        InboundBotReference, OutboundBotReference, Useragent
      ))
      .then(() => assert.fail('Promise should have rejected'))
      .catch((e) => {
        assert.ok(
          e.message.includes('Bad Request'),
          'Error message should mention cause of failure'
        );
      });
  });

  it('should describe an Endpoint using its Address', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(Endpoint) });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => (
        api.BotArmy.describeEndpoint(Address)
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res,
          Endpoint,
          'Wrong endpoint data returned'
        );
      })
      .catch((e) => {
        assert.fail(e);
      });
  });

  it('should reject if describe an Endpoint using its Address fails', () => {
    const fetch = sinon.stub().resolves({ status: 400, statusText: 'Bad Request' });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => api.BotArmy.describeEndpoint(Address))
      .then(() => assert.fail('Promise should have rejected'))
      .catch((e) => {
        assert.ok(
          e.message.includes('Bad Request'),
          'Error message should mention cause of failure'
        );
      });
  });
  it('should Update an Endpoint', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Promise.resolve(Endpoint) });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => (
        api.BotArmy.updateEndpoint(Address, Status)
      ))
      .then((res) => {
        assert.deepStrictEqual(
          res,
          Endpoint,
          'Wrong endpoint data returned'
        );
      })
      .catch((e) => {
        assert.fail(e);
      });
  });

  it('should reject if update Endpoint fails', () => {
    const fetch = sinon.stub().resolves({ sstatus: 400, statusText: 'Bad Request' });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => api.BotArmy.updateEndpoint(Address))
      .then(() => assert.fail('Promise should have rejected'))
      .catch((e) => {
        assert.ok(
          e.message.includes('Bad Request'),
          'Error message should mention cause of failure'
        );
      });
  });
  it('should Delete an Endpoint', () => {
    const fetch = sinon.stub()
      .resolves({ status: 200, json: () => Endpoint });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => api.BotArmy.deleteEndpoint(Address, Status))
      .catch((e) => {
        assert.fail(e);
      });
  });

  it('should reject if delete Endpoint fails', () => {
    const fetch = sinon.stub().resolves({ status: 400, statusText: 'Bad Request' });
    const api = ServisBotApiSdk(fetch, Promise);

    return api.init('http://apiurl.com', 'api-key')
      .then(() => api.BotArmy.deleteEndpoint(Address))
      .then(() => assert.fail('Promise should have rejected'))
      .catch((e) => {
        assert.ok(
          e.message.includes('Bad Request'),
          'Error message should mention cause of failure'
        );
      });
  });
});
