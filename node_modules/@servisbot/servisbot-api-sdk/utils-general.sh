#!/usr/bin/env bash
export CI=true
export CODEBUILD=true

export CODEBUILD_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)

export CODEBUILD_GIT_BRANCH="$(git symbolic-ref HEAD --short 2>/dev/null)"
if [ "$CODEBUILD_GIT_BRANCH" = "" ] ; then
  CODEBUILD_GIT_BRANCH="$(git branch -a --contains HEAD | sed -n 2p | awk '{ printf $1 }')";
  export CODEBUILD_GIT_BRANCH=${CODEBUILD_GIT_BRANCH#remotes/origin/};
fi

export CODEBUILD_GIT_CLEAN_BRANCH="$(echo $CODEBUILD_GIT_BRANCH | tr '/' '.')"
export CODEBUILD_GIT_ESCAPED_BRANCH="$(echo $CODEBUILD_GIT_CLEAN_BRANCH | sed -e 's/[]\/$*.^[]/\\\\&/g')"
export CODEBUILD_GIT_MESSAGE="$(git log -1 --pretty=%B)"
export CODEBUILD_GIT_AUTHOR="$(git log -1 --pretty=%an)"
export CODEBUILD_GIT_AUTHOR_EMAIL="$(git log -1 --pretty=%ae)"
export CODEBUILD_GIT_COMMIT="$(git log -1 --pretty=%H)"
export CODEBUILD_GIT_SHORT_COMMIT="$(git log -1 --pretty=%h)"
export CODEBUILD_GIT_TAG="$(git describe --tags --exact-match 2>/dev/null)"
export CODEBUILD_GIT_MOST_RECENT_TAG="$(git describe --tags --abbrev=0)"

export CODEBUILD_PULL_REQUEST=false
if [ "${CODEBUILD_GIT_BRANCH#pr-}" != "$CODEBUILD_GIT_BRANCH" ] ; then
  export CODEBUILD_PULL_REQUEST=${CODEBUILD_GIT_BRANCH#pr-};
fi

export CODEBUILD_PROJECT=${CODEBUILD_BUILD_ID%:$CODEBUILD_LOG_PATH}
export CODEBUILD_BUILD_URL=https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/codebuild/home?region=${AWS_DEFAULT_REGION}#/builds/$CODEBUILD_BUILD_ID/view/new

export DISABLE_EPSAGON="TRUE"

export NOTIFY_SNS="arn:aws:sns:eu-west-1:079582582350:cicd-events"

function auth_github(){
    echo "INFO: Authorize github"
    mkdir -p /root/.ssh
    aws ssm get-parameter --with-decryption --name /ci/servisbot/SSH_PRIVATE_KEY --query 'Parameter.Value' --output text > /root/.ssh/id_rsa
    aws ssm get-parameter --with-decryption --name /ci/servisbot/SSH_PUBLIC_KEY --query 'Parameter.Value' --output text > /root/.ssh/id_rsa.pub
    chmod 400 /root/.ssh/id_rsa

    git config --global user.email "servisbotci@servisbot.com"
    git config --global user.name "servisbotci"

    git remote set-url origin git@github.com:/servisbot/${1}.git

    ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts

    eval "$(ssh-agent -s)"
    ssh-add /root/.ssh/id_rsa
    ssh-add -l
}

function update_version_git() {
    echo "INFO: Adding git tag (v${FUNC_VER})"
    if git tag | grep ${FUNC_VER}; then
      echo "INFO: Skipping update .."
    else
        git checkout master
        git reset --hard HEAD
        if [[ ${PROJECT_TYPE} == nodejs ]]; then
            echo "INFO: reset git files for npm version"
            echo "commit-hooks = false" >> /root/.npmrc
            npm version ${FUNC_VER} -m "Release version %s"
        fi
        if [[ ${PROJECT_TYPE} == python ]]; then
            echo ${FUNC_VER} | tee VERSION
            git commit -am "Release version ${FUNC_VER}"
            git tag v${FUNC_VER}
        fi
        git push origin master
        git push origin master --tags
    fi
}

function run_nyc() {
    if [[ ${AWS_ENV} == "helower" || ${AWS_ENV} == "cicd"  ]]; then
        echo "INFO: Run nyc report"
        if npm list --depth=0 nyc; then
            node_modules/.bin/nyc report --reporter=lcov
        fi
    fi
}

function run_sonar() {
    if [[ ${AWS_ENV} == "helower" || ${AWS_ENV} == "cicd"  ]]; then
        echo "INFO: Downloading sonar-scanner"
        # aws s3 cp --quiet s3://servisbot/r4BlhCU3wZO2V6cpiAHZau5d/sonar-scanner-cli-3.2.0.1227-linux.zip /tmp/
        wget --quiet -P /tmp/ https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip
        unzip -qq /tmp/sonar-scanner-cli-3.2.0.1227-linux.zip -d /tmp/
        export PATH=$PATH:/tmp/sonar-scanner-3.2.0.1227-linux/bin/

        echo "INFO: Running sonar-scanner"
        sonar-scanner \
            -Dsonar.projectKey=servisbot:${FUNCTION_NAME} \
            -Dsonar.organization=servisbot \
            -Dsonar.sources=. \
            -Dsonar.exclusions="coverage/**,dist/**,infrastructure/**,lib/**,node_modules/**,test/**,.git,package-lock.json,README.md" \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=30b3a6d260f99781d55e490635cd0068c7012dec
    fi
}

function run_depcheck() {
    if [[ ${PROJECT_TYPE} == "nodejs" ]] && [[ ${AWS_ENV} == "helower" || ${AWS_ENV} == "cicd" ]]; then
        npm i --quiet -g depcheck
        if [[ -e ".depcheckignore" ]]; then
          DEPCHECKIGNORE=$(cat .depcheckignore)
        else
          DEPCHECKIGNORE=""
        fi
        depcheck --ignores pre-commit,$DEPCHECKIGNORE .
    fi
}

function update_npm_version() {
    if [[ ${PROJECT_TYPE} == "nodejs" ]]; then
        echo "INFO: update NPM module ${NPM_MODULE_NAME}@${NPM_MODULE_VERSION}"
        aws ssm get-parameter --with-decryption --name /npm/npmrc/token --query 'Parameter.Value' --output text> .npmrc
        npm i --quiet

        echo "INFO: checking installed version of ${NPM_MODULE_NAME}"
        MODULE_INSTALLED_VERSION=$(jq ".dependencies[\"${NPM_MODULE_NAME}\"].version" package-lock.json | tr -d '"')

        if [[ ${MODULE_INSTALLED_VERSION} == "null" ]]; then
            echo "INFO: NPM module not installed, skipping."
            export NPM_MODULE_STATUS="False"
        elif [[ "${MODULE_INSTALLED_VERSION}" == "${NPM_MODULE_VERSION}" ]]; then
            echo "INFO: NPM module (${NPM_MODULE_NAME}) already running version ${MODULE_INSTALLED_VERSION}"
            export NPM_MODULE_STATUS="False"
        else
            echo "INFO: Updating ${NPM_MODULE_NAME} to ${NPM_MODULE_VERSION}"
            auth_github ${FUNCTION_NAME}
            git checkout master
            npm install --save-exact ${NPM_MODULE_NAME}@${NPM_MODULE_VERSION}
            git commit -m "Updating ${NPM_MODULE_NAME} to ${NPM_MODULE_VERSION}" package.json package-lock.json
            export UPDATE_LAMBDA="True"
        fi
    fi
}
