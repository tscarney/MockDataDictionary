#!/usr/bin/env bash
set -e

if [[ ${DEBUG} == "True" ]]; then
    set -x
fi

function validate_cloudformation() {
    for infra in $(ls infrastructure); do
        aws cloudformation validate-template --template-body file://infrastructure/${infra} > /dev/null || cf_status=1
    done

    if [[ ${cf_status} -eq 1 ]]; then
        echo "ERROR: cloudformation templates failed validation"
        exit 1
    else
        echo "INFO: cloudformation templates successfully validated"
    fi
}

function get_cloudformation_params() {
    aws ssm get-parameter --name /cloudformation/${AWS_ENV}-${CORE_NAME}/params --with-decryption --query "Parameter.Value" --output text > params.json
}

function put_cloudformation_version_param() {
    aws ssm put-parameter --name /cloudformation/${AWS_ENV}-${CORE_NAME}/templateVersion --overwrite --value "${CF_VERSION}" --type String
}

function stack_exist() {
    STACK_EXISTS=$(aws cloudformation list-stacks --query "StackSummaries[?StackName == '${AWS_ENV}-${CORE_NAME}']".StackName --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE ROLLBACK_COMPLETE UPDATE_ROLLBACK_COMPLETE --output text)

    if [[ -z ${STACK_EXISTS} ]]; then
        export CFN_ACTION=create-stack
    else
        export CFN_ACTION=update-stack
    fi
}

function run_cloudformation() {
    put_cloudformation_version_param
    stack_exist

    if [[ ${STACK_EXISTS} ]]; then
        STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${AWS_ENV}-${CORE_NAME} --query "Stacks[].StackStatus" --output text)
        echo "INFO: Stack status is ${STACK_STATUS}"
        if [[ ${STACK_STATUS} = *"IN_PROGRESS" ]]; then
            echo "INFO: waiting for cloudformation to complete"
            aws cloudformation wait stack-update-complete --stack-name ${AWS_ENV}-${CORE_NAME}
            echo "INFO: cloudformation update stack complete"
        fi
    fi

    get_cloudformation_params
    aws cloudformation ${CFN_ACTION} \
      --template-url https://s3-eu-west-1.amazonaws.com/sb-helower-${CORE_NAME}/cf/core-${CF_VERSION}.yaml \
      --capabilities CAPABILITY_NAMED_IAM --stack-name ${AWS_ENV}-${CORE_NAME} \
      --parameters file://params.json \
      --role-arn arn:aws:iam::${AWS_ACCOUNT_ID}:role/cloudformation
    rm params.json

    echo "INFO: waiting for cloudformation to complete"
    if [[ ${CFN_ACTION} == "create-stack" ]]; then
        aws cloudformation wait stack-create-complete --stack-name ${AWS_ENV}-${CORE_NAME}
    else
        aws cloudformation wait stack-update-complete --stack-name ${AWS_ENV}-${CORE_NAME}
    fi
    echo "INFO: cloudformation update stack complete"
}

function upload_cloudformation_v2() {
  CORE_FILE=sb-helower-${CORE_NAME}/cf/core-${CF_VERSION}.yaml
  TEMPLATE_FILE=sb-helower-${CORE_NAME}/cf/${FUNCTION_NAME}-template-${CF_VERSION}.yaml

  SKIPPED=0
  cf_upload=0

  if [[ -f "infrastructure/template.yaml" ]]; then
      echo "INFO: ${TEMPLATE_FILE} exists"
      if ! aws s3 ls s3://${TEMPLATE_FILE} || [[ ${CF_VERSION} == "latest" ]]; then
          echo "INFO: uploading ${TEMPLATE_FILE}"
          aws s3 cp infrastructure/template.yaml s3://${TEMPLATE_FILE} --acl bucket-owner-full-control > /dev/null || cf_upload=1
          SKIPPED=1
      fi
  fi
  if [[ -f "infrastructure/core.yaml" ]]; then
      echo "INFO: ${CORE_FILE} exists"
      if ! aws s3 ls s3://${CORE_FILE} || [[ ${CF_VERSION} == "latest" ]]; then
          echo "INFO: uploading ${CORE_FILE}"
          aws s3 cp infrastructure/core.yaml s3://${CORE_FILE} --acl bucket-owner-full-control > /dev/null || cf_upload=1
          SKIPPED=1
      fi
  fi

  if [[ ${cf_upload} -eq 1 ]]; then
      echo "ERROR: cloudformation templates failed upload"
      exit 1
  elif [[ ${SKIPPED} -eq 0 ]]; then
      echo "INFO: skipped cloudformation upload as ${CF_VERSION} for ${FUNCTION_NAME} already exists"
  else
      echo "INFO: cloudformation templates successfully uploaded"
  fi
}

function upload_cloudformation() {
    upload_cloudformation_v2
}
