/**
 * Stringifies an object to JSON. If the object cannot be successfully stringified
 * a string containing the error is returned instead.
 *
 * @param {object} obj
 * @returns {string}
 */
const stringifyObject = (obj) => {
  try {
    return JSON.stringify(obj);
  } catch (e) {
    if (e.message === 'Converting circular structure to JSON') {
      return '{Circular Object}';
    }
    return '{Cannot Stringify Object}';
  }
};

/**
 * Converts the given arg into a string.
 *
 * @param {*} arg
 * @returns {string}
 */
const stringifyItem = (arg) => {
  if (arg instanceof Error) {
    return arg.stack;
  }
  if (Array.isArray(arg)) {
    return `[${arg.map(i => stringifyItem(i)).join(', ')}]`;
  }
  if (typeof arg === 'object') {
    return stringifyObject(arg);
  }
  if (typeof arg === 'string') {
    return arg;
  }
  if (typeof arg === 'number') {
    return `${arg}`;
  }
  if (typeof arg === 'function') {
    return '{Function}';
  }
  return '{Unknown Value}';
};

/**
 * Converts an array of any types into a string.
 *
 * @param {Array<*>} args
 * @returns {string}
 */
module.exports = args => args.map(i => stringifyItem(i)).join(', ');
