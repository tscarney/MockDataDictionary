exports.LEVELS = {
  ERROR: 'ERROR',
  WARN: 'WARN',
  INFO: 'INFO',
  DEBUG: 'DEBUG',
};


const LEVEL_VALUES = {
  ERROR: 10,
  WARN: 20,
  INFO: 30,
  DEBUG: 40,
};


const VALID_LEVELS = Object.keys(exports.LEVELS);


exports.DEFAULT_LEVEL = exports.LEVELS.INFO;


/**
 * Returns true if the given log level is valid, false otherwise.
 *
 * @param {string} level
 * @returns {boolean}
 */
exports.isValid = level => level && typeof level === 'string' && VALID_LEVELS.includes(level.toUpperCase());


/**
 * Returns a valid log level which can be used by the logger. If the passed
 * value is not a valid log level then the env vars are checked for a valid
 * log level. If the env vars contain a valid log level then that is used,
 * otherwise the default log level of INFO is used.
 *
 * @param {string} currentLevel
 * @returns {string} guaranteed value log level
 */
exports.getValidLogLevel = (currentLevel) => {
  if (exports.isValid(currentLevel)) {
    return currentLevel.toUpperCase();
  }
  if (exports.isValid(process.env.LOG_LEVEL)) {
    return process.env.LOG_LEVEL;
  }
  return exports.DEFAULT_LEVEL;
};

/**
 * Returns an integer value that represents the passed log level.
 *
 * @param {string} level
 * @returns {number}
 */
exports.getLogValue = level => LEVEL_VALUES[exports.getValidLogLevel(level)];
