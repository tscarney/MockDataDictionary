const LogLevel = require('./log-level');
const stringifyItems = require('./stringify-items');


/**
 * Returns true if the given statement level should be logged in the context of
 * the system level.
 *
 * @param {string} systemLevel
 * @param {string} statementLevel
 */
const shouldLog = (systemLevel, statementLevel) => {
  const systemValue = LogLevel.getLogValue(systemLevel);
  const statementValue = LogLevel.getLogValue(statementLevel);
  return statementValue <= systemValue;
};

/**
 * Formats the log level so that they are all the same length. For the 4 letter
 * levels this means pre-pending a space.
 *
 * @param {string} level
 * @returns {string}
 */
const formatLevel = (level) => {
  if (level.length === 5) {
    return level;
  }
  return ` ${level}`;
};

/**
 * Logs to stdout based on the specified system and statement log levels.
 *
 * @param {string} systemLevel
 * @param {string} statementLevel
 * @param {string} correlationId
 * @param {Array} args
 */
const log = (systemLevel, statementLevel, correlationId, args = []) => {
  if (shouldLog(systemLevel, statementLevel)) {
    // eslint-disable-next-line no-console
    console.log(`${formatLevel(statementLevel)} - ${correlationId} -> ${stringifyItems(args)}`);
  }
};


module.exports = {
  debug: (systemLevel, correlationId, args) => log(systemLevel, LogLevel.LEVELS.DEBUG, correlationId, args),
  info: (systemLevel, correlationId, args) => log(systemLevel, LogLevel.LEVELS.INFO, correlationId, args),
  warn: (systemLevel, correlationId, args) => log(systemLevel, LogLevel.LEVELS.WARN, correlationId, args),
  error: (systemLevel, correlationId, args) => log(systemLevel, LogLevel.LEVELS.ERROR, correlationId, args),
};
