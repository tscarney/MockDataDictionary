
const SharedLogger = require('./shared-logger');
const LogLevel = require('./log-level');
const CorrelationId = require('./correlation-id');

module.exports = class InstanceLogger {
  /**
   * A logger that can be instantiated. Its config is encapsulated and any
   * method calls will cause no side effects in other logger instances or
   * the global logger.
   *
   * @param {object} config { correlationId, logLevel }
   */
  constructor(config) {
    if (config) {
      const { correlationId, logLevel } = config;
      if (CorrelationId.isValid(correlationId)) {
        this.correlationId = correlationId;
      }
      if (LogLevel.isValid(logLevel)) {
        this.logLevel = logLevel;
      }
    }
  }

  /**
   * Returns the correlation id currently being used by the system.
   *
   * @returns {string}
   */
  getCorrelationId() {
    return CorrelationId.getValidCorrelationId(this.correlationId);
  }

  /**
   * Sets the correlation id that the logger will use. If value
   * is invalid then the original value will continue to be used.
   *
   * @param {string} correlationId
   */
  setCorrelationId(correlationId) {
    if (CorrelationId.isValid(correlationId)) {
      this.correlationId = correlationId;
    } else {
      this.warn(`Attempted to set invalid correlation id. Using Existing: ${this.getCorrelationId()}`);
    }
  }

  /**
   * Returns the log level currently being used by the system.
   *
   * @returns {string}
   */
  getLogLevel() {
    return LogLevel.getValidLogLevel(this.logLevel);
  }

  /**
   * Sets the log level that the logger will use. If the value is invalid
   * then the original value will continue to be used.
   *
   * @param {string} logLevel
   */
  setLogLevel(logLevel) {
    if (LogLevel.isValid(logLevel)) {
      this.logLevel = logLevel;
    } else {
      this.warn(`Attempted to set invalid log level. Using Existing: ${this.getLogLevel()}`);
    }
  }

  debug(...args) {
    SharedLogger.debug(this.getLogLevel(), this.getCorrelationId(), args);
  }

  info(...args) {
    SharedLogger.info(this.getLogLevel(), this.getCorrelationId(), args);
  }

  warn(...args) {
    SharedLogger.warn(this.getLogLevel(), this.getCorrelationId(), args);
  }

  error(...args) {
    SharedLogger.error(this.getLogLevel(), this.getCorrelationId(), args);
  }
};
